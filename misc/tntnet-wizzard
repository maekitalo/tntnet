#!/bin/sh

EMAIL=your-email@somewhere

usage()
{
    cat <<EOF
Usage: $0 [OPTION]

  --project=<projectname>  create a minmal project
  --app=<projectname>      create a minmal project as a standalone application
  --mvc=<projectname>      create a mvc project
  --page=<pagename>        add a page to the existing mvc project
  --config=<projectname>   create a tntnet.xml file for the application
EOF

    exit $1
}

checkProc()
{
    echo checking for $1
    if ! which $1 >/dev/null 2>&1
    then
        echo ERROR: $1 not installed
        exit 1
    fi
}

checkSystem()
{
    if [ -e "$1" ]
    then
        echo ERROR: $1 does already exists
        exit 1
    fi
    checkProc autoreconf
    checkProc automake
}

tntnet_xml()
{
    if [ -f "tntnet.xml" ]
    then
        echo ERROR: tntnet.xml does already exists
        exit 1
    fi

    echo create tntnet.xml
    project=$1
    cat >tntnet.xml <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!--
  This is the main configuration file for tntnet.

  You can find documentation about the parameters in the man page tntnet.xml(7)
  -->
<tntnet>
  <mappings>
    <!-- map / to $project@$project -->
    <mapping>
      <target>$project@$project</target>
      <url>^/$</url>
    </mapping>
    <!-- map /comp.* or /comp to comp@$project -->
    <mapping>
      <target>\$1@$project</target>
      <url>^/([^.]+)(\..+)?</url>
    </mapping>
  </mappings>

  <!-- listen to a port (empty string means any local interface) -->
  <listeners>
    <listener>
      <port>8000</port>
    </listener>
  <!-- a certificate enables ssl -->
  <!--
    <listener>
      <port>8443</port>
      <certificate>tntnet.pem</certificate>
    </listener>
    -->
  </listeners>

  <logging>
    <rootlogger>INFO</rootlogger>

    <loggers>
      <logger>
        <category>tntnet</category>
        <level>INFO</level>
      </logger>
      <logger>
        <category>component.$project</category>
        <level>INFO</level>
      </logger>
    </loggers>

    <!--
    <file>tntnet.log</file>
    <maxfilesize>10M</maxfilesize>
    <maxbackupindex>2</maxbackupindex>
    -->

  </logging>

  <!-- <maxRequestSize>65536</maxRequestSize> -->
  <!-- <maxRequestTime>600</maxRequestTime> -->
  <!-- <user>tntnet</user> -->
  <!-- <group>tntnet</group> -->
  <!-- <dir>/</dir> -->
  <!-- <chrootdir>/var/safedir</chrootdir> -->
  <!-- <pidfile>/var/run/tntnet.pid</pidfile> -->
  <!-- <daemon>0</daemon> -->
  <!-- <minThreads>5</minThreads> -->
  <!-- <maxThreads>100</maxThreads> -->
  <!-- <threadStartDelay>10</threadStartDelay> -->
  <!-- <queueSize>1000</queueSize> -->
  <compPath>
    <entry>.libs</entry>
  </compPath>
  <!-- <socketBufferSize>16384</socketBufferSize> -->
  <!-- <socketReadTimeout>10</socketReadTimeout> -->
  <!-- <socketWriteTimeout>10000</socketWriteTimeout> -->
  <!-- <keepAliveTimeout>15000</keepAliveTimeout> -->
  <!-- <keepAliveMax>1000</keepAliveMax> -->
  <!-- <sessionTimeout>300</sessionTimeout> -->
  <!-- <listenBacklog>64</listenBacklog> -->
  <!-- <listenRetry>5</listenRetry> -->
  <!-- <enableCompression>no</enableCompression> -->
  <!-- <mimeDb>/etc/mime.types</mimeDb> -->
  <!-- <minCompressSize>1024</minCompressSize> -->
  <!-- <maxUrlMapCache>8192</maxUrlMapCache> -->
  <!-- <defaultContentType>text/html; charset=UTF-8</defaultContentType> -->
  <!-- <accessLog>/var/log/tntnet/access.log</accessLog> -->
  <!-- <errorLog>/var/log/tntnet/error.log</errorLog> -->
  <!-- <maxBackgroundTasks>5</maxBackgroundTasks> -->
  <!-- <server>Tntnet</server> -->

</tntnet>
EOF
}

project()
{
    project=$1

    echo create directories $project $project/manager $project/model $project/view $project/controller $project/resources
    mkdir $project $project/manager $project/model $project/view $project/controller $project/resources

    echo create $project/configure.ac
    cat >$project/configure.ac <<EOF
AC_INIT([${project}], [0.1], [$EMAIL])
AM_INIT_AUTOMAKE([foreign])

AC_PROG_CXX
AC_LANG(C++)

AC_CONFIG_HEADERS([config.h])
AC_CHECK_HEADER([cxxtools/mutex.h], , AC_MSG_ERROR([cxxtools headers not found]))
AC_CHECK_HEADER([tnt/tntnet.h], , AC_MSG_ERROR([tntnet headers not found]))
# AC_CHECK_HEADER([tntdb/connection.h], , AC_MSG_ERROR([tntdb headers not found]))
AC_CHECK_PROGS(ECPPC, [ecppc])
AC_PROG_SED

AC_OUTPUT([
    Makefile
])
EOF

    echo create $project/Makefile.am
    cat >$project/Makefile.am <<EOF
ACLOCAL_AMFLAGS = -I m4 --install
AUTOMAKE_OPTIONS = subdir-objects

bin_PROGRAMS = ${project}

noinst_HEADERS = \\
	configuration.h

ecppSources = \\
	index.ecpp \\
	webmain.ecpp

staticSources = \\
	resources/${project}.css

${project}_SOURCES = \\
	main.cpp \\
	configuration.cpp \\
	\$(ecppSources)

nodist_${project}_SOURCES = \\
	resources.cpp

${project}_LDFLAGS = -lcxxtools -ltntnet

CLEANFILES = \$(ecppSources:.ecpp=.cpp) \$(ecppSources:.ecpp=.deps) resources.cpp

EXTRA_DIST = \$(staticSources)

#
# Rules for tntnet applications
#

ECPPFLAGS=-I\$(top_srcdir)

# resources
resources.cpp: \$(staticSources) Makefile.am
	\$(ECPPC) -bb -z -n resources -p -o resources.cpp \$(ECPPFLAGS) \$(staticSources)

SUFFIXES=.ecpp .ico .cpp

.ecpp.cpp:
	\$(ECPPC) -n \$(basename \$<) \$(ECPPFLAGS) -o \$@ \$<
.ecpp.deps:
	\$(ECPPC) -M \$(ECPPFLAGS) \$< | \$(SED) '1s/\(.*\).cpp:/\1.cpp \1.deps:/' > \$@

-include \$(ecppSources:.ecpp=.deps)
EOF

    echo create $project/main.cpp
    cat >$project/main.cpp <<EOF
#include <iostream>
#include <configuration.h>
#include <tnt/tntnet.h>
#include <tnt/configurator.h>
#include <cxxtools/log.h>

log_define("${project}")

int main(int argc, char* argv[])
{
  try
  {
    Configuration& configuration = Configuration::it();

    if (argc > 1)
      Configuration::readConfiguration(argv[1]);
    else
      Configuration::readConfiguration("${project}.conf");

    log_init(configuration.loggingConfiguration());

    tnt::Tntnet app;
    app.listen(configuration.listenIp(), configuration.listenPort());

    tnt::Configurator configurator(app);
    if (configuration.sessionTimeout())
      configurator.setSessionTimeout(configuration.sessionTimeout());

    // configure static stuff - lookup files in static resources first
    app.mapUrl("^/(.*)", "resources")
       .setPathInfo("resources/\$1");

    // index page
    app.mapUrl("^/$", "webmain")
       .setArg("next", "index");

    // controller
    app.mapUrl("^/(.*)$", "controller/\$1");

    // view
    app.mapUrl("^/(.*)$", "webmain")
       .setArg("next", "view/\$1");

    app.run();
  }
  catch (const std::exception& e)
  {
    std::cerr << e.what() << std::endl;
  }
}

EOF

    echo create $project/webmain.ecpp
    cat >$project/webmain.ecpp <<EOF
<%session scope="shared">
</%session>
<%request scope="shared">
</%request>
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="description" content="${project} application">
    <link rel="stylesheet" href="/${project}.css" type="text/css">
  </head>
  <body>
    <div id="header">
      <span id="title">${project} application</span>
    </div>

    <div id="menu">
      <ul class="nav">
        <li class="navitem"><a href="/">Home</a></li>
      </ul>
    </div>

    <div id="content">
       <& (request.getArg("next")) qparam >
    </div>
  </body>
</html>
EOF

    echo create $project/${project}.conf
    cat >$project/${project}.conf <<EOF
listen.port 8000
sessiontimeout 3600

# dburl       postgresql:dbname=${project}

rootlogger    INFO
logger.${project}  INFO
EOF

    echo create $project/index.ecpp
    cat >$project/index.ecpp <<EOF
<h1>${project}</h1>

Welcome to the ${project} application.
EOF

    echo create $project/configuration.cpp
    cat >$project/configuration.cpp <<EOF
/*
 * Copyright (C) 2013 Tommi Maekitalo
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * is provided AS IS, WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, and
 * NON-INFRINGEMENT.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 *
 */

#include <configuration.h>
#include <cxxtools/properties.h>
#include <fstream>

void operator>>= (const cxxtools::SerializationInfo& si, Configuration& config)
{
  si.getMember("listen.ip", config._listenIp);  // listen.ip is optional - default is to listen on all local interfaces
  si.getMember("listen.port") >>= config._listenPort;
  si.getMember("sessiontimeout", config._sessionTimeout);  // sessiontimeout is optional
  si.getMember("dburl", config._dburl);
  config._loggingConfiguration = si;
}

Configuration::Configuration()
    : _listenPort(0),
      _sessionTimeout(0)
{ }

void Configuration::readConfiguration(const std::string& file)
{
  std::ifstream in(file.c_str());
  in >> cxxtools::Properties(Configuration::it());
}

Configuration& Configuration::it()
{
  static Configuration theConfiguration;
  return theConfiguration;
}
EOF

    echo create $project/configuration.h
    cat >$project/configuration.h <<EOF
#ifndef CONFIGURATION_H
#define CONFIGURATION_H

#include <string>
#include <cxxtools/serializationinfo.h>

class Configuration
{
    friend void operator>>= (const cxxtools::SerializationInfo& si, Configuration& config);

  public:
    // return the static instance
    static Configuration& it();

    static void readConfiguration(const std::string& file);

    const std::string& listenIp() const
    { return _listenIp; }

    unsigned short listenPort() const
    { return _listenPort; }

    unsigned sessionTimeout() const
    { return _sessionTimeout; }

    const std::string& dburl() const
    { return _dburl; }

    const cxxtools::SerializationInfo& loggingConfiguration() const
    { return _loggingConfiguration; }

  private:
    Configuration();
    Configuration(const Configuration&);  // no implementation
    const Configuration& operator=(const Configuration&);  // no implementation

    std::string    _listenIp;
    unsigned short _listenPort;
    unsigned       _sessionTimeout;
    std::string    _dburl;
    cxxtools::SerializationInfo _loggingConfiguration;
};

#endif // CONFIGURATION_H
EOF

    echo create $project/$project.css
    cat >$project/resources/$project.css <<EOF
/* add your css here */
EOF

    echo project $project created
}

pages()
{
    if [ ! -d view ]
    then
        echo ERROR: view directory not found
        exit 1
    fi

    if [ ! -d controller ]
    then
        echo ERROR: controller directory not found
        exit 1
    fi

    cp webmain.ecpp webmain.ecpp.new
    cp Makefile.am Makefile.am.new

    while [ "$1" ]
    do
        page=$1
        shift

        if [ -f view/$page.ecpp ]
        then
            echo $page already exists
            continue
        fi

        echo create view/$page.ecpp
        cat >view/$page.ecpp <<EOF
<h1>$page</h1>
EOF

        echo create controller/$page.cpp
        cat >controller/$page.cpp <<EOF
#include <tnt/component.h>
#include <tnt/componentfactory.h>
#include <tnt/httprequest.h>
#include <tnt/httpreply.h>
#include <cxxtools/log.h>

log_define("controller.$page")

namespace
{
  class ${page}Controller : public tnt::Component
  {
    public:
      unsigned operator() (tnt::HttpRequest& request, tnt::HttpReply& reply, tnt::QueryParams& qparam);
  };

  static tnt::ComponentFactoryImpl<${page}Controller> factory("controller/${page}");

  unsigned ${page}Controller::operator() (tnt::HttpRequest& request, tnt::HttpReply& reply, tnt::QueryParams& qparam)
  {
    // TODO add code for processing user input
    return DECLINED;
  }

}
EOF

        echo add view/$page.ecpp and controller/$page.cpp to Makefile.am
        awk '
    /ecppSources/{E=1}
    E && /index\.ecpp/ { print "\tview/'$page'.ecpp \\"; E=0 }
    /_SOURCES =/{S=1}
    S && /main.cpp/ { print "\tcontroller/'$page'.cpp \\"; E=0 }
    { print }' <Makefile.am.new >Makefile.am.tmp
        if diff Makefile.am.tmp Makefile.am.new >/dev/null
        then
            echo "failed to add page <$page> to Makefile.am"
            rm Makefile.am.tmp
        else
            mv Makefile.am.tmp Makefile.am.new
        fi

        echo add menu item $page
        awk '
    /navitem/{M=1}
    M && /<\/ul>/ { print "        <li class=\"navitem\"><a href=\"/'$page'\">'$page'</a></li>"; M=0 }
    { print }' <webmain.ecpp.new >webmain.ecpp.tmp
        mv webmain.ecpp.tmp webmain.ecpp.new

    done

    mv webmain.ecpp webmain.ecpp.old
    mv webmain.ecpp.new webmain.ecpp
    mv Makefile.am Makefile.am.old
    mv Makefile.am.new Makefile.am
}

simpleproject()
{
    project=$1

    echo create directory $project
    mkdir $project

    (
        cd $project
        tntnet_xml $project
    )

    echo create $project/configure.ac
    cat >$project/configure.ac <<EOF
AC_INIT([${project}], [0.1], [your-email@somewhere])
AM_INIT_AUTOMAKE([foreign])
LT_INIT([disable-static])

AC_PROG_CXX
AC_LANG(C++)

AC_CONFIG_HEADERS([config.h])
AC_CHECK_HEADER([cxxtools/mutex.h], , AC_MSG_ERROR([cxxtools headers not found]))
AC_CHECK_HEADER([tnt/tntnet.h], , AC_MSG_ERROR([tntnet headers not found]))
#AC_CHECK_HEADER([tntdb/connection.h], , AC_MSG_ERROR([tntdb headers not found]))
AC_CHECK_PROGS(ECPPC, [ecppc])
AC_PROG_SED

AC_OUTPUT([
    Makefile
])
EOF

    echo create $project/Makefile.am
    cat >$project/Makefile.am <<EOF
AUTOMAKE_OPTIONS = subdir-objects

pkglib_LTLIBRARIES = ${project}.la

ecppSources = \\
	${project}.ecpp

${project}_la_SOURCES = \\
	\$(ecppSources)

${project}_la_LDFLAGS = -module -shared -lcxxtools -ltntnet

CLEANFILES = \$(ecppSources:.ecpp=.cpp) \$(ecppSources:.ecpp=.deps) resources.cpp

#
# Rules for tntnet applications
#

SUFFIXES=.ecpp .ico .cpp

ECPPFLAGS=-I\$(top_srcdir)

.ecpp.cpp:
	\$(ECPPC) -n \$(basename \$<) \$(ECPPFLAGS) -o \$@ \$<
.ecpp.deps:
	\$(ECPPC) -M \$(ECPPFLAGS) \$< | \$(SED) '1s/\(.*\).cpp:/\1.cpp \1.deps:/' > \$@

-include \$(ecppSources:.ecpp=.deps)
EOF

    echo create $project.ecpp
    cat >$project/$project.ecpp <<EOF
<%pre>
// put your includes here
// #include "${project}.h"
</%pre>
<%args>
// define the query parameters
// bar;
</%args>
<%session>
// define your session scope variables here
// std::string mySessionState;
</%session>
<%cpp>
// put your C++ code here
</%cpp>
<!DOCTYPE html>
<html>
 <head>
  <title>ecpp application ${project}</title>
 </head>
 <body>
  <h1>${project}</h1>
  <p>Hello world!</p>
 </body>
</html>
EOF

    echo create log.properties
    cat >$project/log.properties <<EOF
rootlogger    INFO
logger.${project}  INFO

#file = ${project}     # this enables logging to a file

# setting maxfilesize and maxbackupindex enables rolling of file
# when file reaches maxfilesize, it is renamed to file.0 and a new file is created
# file.0 gets file.1 and so on up to maxbackupindex
#maxfilesize = 1M
#maxbackupindex = 2

#stdout = 1          # log to stdout instead of stderr if set

#loghost = hostname  # send loging via udp to host
#broadcast = 1       # set when loghost is a network address
EOF
}

appproject()
{
    project=$1

    echo create directory $project
    mkdir $project

    echo create $project/configure.ac
    cat >$project/configure.ac <<EOF
AC_INIT([${project}], [0.1], [your-email@somewhere])
AM_INIT_AUTOMAKE([foreign])

AC_PROG_CXX
AC_LANG(C++)

AC_CONFIG_HEADERS([config.h])
AC_CHECK_HEADER([cxxtools/mutex.h], , AC_MSG_ERROR([cxxtools headers not found]))
AC_CHECK_HEADER([tnt/tntnet.h], , AC_MSG_ERROR([tntnet headers not found]))
#AC_CHECK_HEADER([tntdb/connection.h], , AC_MSG_ERROR([tntdb headers not found]))
AC_CHECK_PROGS(ECPPC, [ecppc])
AC_PROG_SED

AC_OUTPUT([
    Makefile
])
EOF

    echo create $project/Makefile.am
    cat >$project/Makefile.am <<EOF
AUTOMAKE_OPTIONS = subdir-objects

bin_PROGRAMS = ${project}

ecppSources = \\
	${project}.ecpp

${project}_SOURCES = \\
	main.cpp \\
	\$(ecppSources)

${project}_LDFLAGS = -lcxxtools -ltntnet

CLEANFILES = \$(ecppSources:.ecpp=.cpp) \$(ecppSources:.ecpp=.deps) resources.cpp

#
# Rules for tntnet applications
#

SUFFIXES=.ecpp .ico .cpp

ECPPFLAGS=-I\$(top_srcdir)

.ecpp.cpp:
	\$(ECPPC) -n \$(basename \$<) \$(ECPPFLAGS) -o \$@ \$<
.ecpp.deps:
	\$(ECPPC) -M \$(ECPPFLAGS) \$< | \$(SED) '1s/\(.*\).cpp:/\1.cpp \1.deps:/' > \$@

-include \$(ecppSources:.ecpp=.deps)
EOF

    echo create $project/main.cpp
    cat >$project/main.cpp <<EOF
#include <iostream>
#include <tnt/tntnet.h>
#include <tnt/configurator.h>
#include <cxxtools/arg.h>
#include <cxxtools/log.h>

log_define("${project}")

int main(int argc, char* argv[])
{
  try
  {
    cxxtools::Arg<std::string> ip(argc, argv, 'l');
    cxxtools::Arg<unsigned short> port(argc, argv, 'p', 8000);

    log_init();

    tnt::Tntnet app;
    app.listen(ip, port);

    // map / to ${project}
    app.mapUrl("^/$", "${project}");

    // map /comp.* or /comp to comp
    app.mapUrl("^/([^.]+)(\\\\..+)?", "\$1");

    app.run();
  }
  catch (const std::exception& e)
  {
    std::cerr << e.what() << std::endl;
  }
}

EOF

    echo create $project.ecpp
    cat >$project/$project.ecpp <<EOF
<%pre>
// put your includes here
// #include "${project}.h"
</%pre>
<%args>
// define the query parameters
// bar;
</%args>
<%session>
// define your session scope variables here
// std::string mySessionState;
</%session>
<%cpp>
// put your C++ code here
</%cpp>
<!DOCTYPE html>
<html>
 <head>
  <title>ecpp application ${project}</title>
 </head>
 <body>
  <h1>${project}</h1>
  <p>Hello world!</p>
 </body>
</html>
EOF

    echo create log.properties
    cat >$project/log.properties <<EOF
rootlogger    INFO
logger.${project}  INFO

#file = ${project}     # this enables logging to a file

# setting maxfilesize and maxbackupindex enables rolling of file
# when file reaches maxfilesize, it is renamed to file.0 and a new file is created
# file.0 gets file.1 and so on up to maxbackupindex
#maxfilesize = 1M
#maxbackupindex = 2

#stdout = 1          # log to stdout instead of stderr if set

#loghost = hostname  # send loging via udp to host
#broadcast = 1       # set when loghost is a network address
EOF
}

simplepages()
{
    if [ ! -f Makefile.am ]
    then
        echo ERROR: Makefile.am not found
        exit 1
    fi

    cp Makefile.am Makefile.am.new
    while [ "$1" ]
    do
        page=$1
        shift

        if [ -f $page.ecpp ]
        then
            echo $page already exists
            continue
        fi

        echo create $page.ecpp
        cat >$page.ecpp <<EOF
<h1>$page</h1>
EOF

        echo add $page.ecpp Makefile.am
        awk '
    /ecppSources/{E=1}
    E && /\.ecpp$/ { print "\t'$page'.ecpp \\"; E=0 }
    { print }' <Makefile.am.new >Makefile.am.tmp
        if diff Makefile.am.tmp Makefile.am.new >/dev/null
        then
            echo "failed to add page <$page> to Makefile.am"
            rm Makefile.am.tmp
        else
            mv Makefile.am.tmp Makefile.am.new
        fi

    done

    mv Makefile.am Makefile.am.old
    mv Makefile.am.new Makefile.am
}

########################################################################
# main
#
while test $# -gt 0
do
    case "$1" in
    -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
    *) optarg= ;;
    esac

    case "$1" in
        --config=*)
            project=$optarg
            config=1
            ;;

        --project=*)
            project=$optarg
            simpleproject=1
            ;;

        --app=*)
            project=$optarg
            appproject=1
            shift
            ;;

        --mvc=*)
            project=$optarg
            ;;

        --page=*)
            pages="$pages $optarg"
            ;;

        *)
            usage
            exit 1
            ;;
    esac

    shift
done

if [ ! "$project" -a ! "$pages" -a ! "$config" ]
then
    usage
    exit 1
fi

if [ "$config" ]
then
    tntnet_xml $project
    exit 0
fi

echo project=$project pages="$pages"
if [ "$appproject" ]
then
    checkSystem $project
    appproject $project

    cd $project

    if [ "$pages" ]
    then
        simplepages $pages
    fi

    echo run autoreconf -i
    autoreconf -i

    echo run configure
    ./configure

    echo "============================================================"
    echo "= project <$project> created"
    echo "= change to directory <$project> and run <make> to build the application"
    echo "= execute <./$project> there to run the application"
    echo "============================================================"

elif [ "$simpleproject" ]
then
    checkSystem $project
    simpleproject $project

    cd $project

    if [ "$pages" ]
    then
        simplepages $pages
    fi

    echo run autoreconf -i
    autoreconf -i

    echo run configure
    ./configure

    echo "============================================================"
    echo "= project <$project> created"
    echo "= change to directory <$project> and run <make> to build the application"
    echo "= execute <tntnet> there to run the application"
    echo "============================================================"

elif [ "$project" ]
then
    checkSystem $project

    project $project

    cd $project

    if [ "$pages" ]
    then
        pages $pages
    fi

    echo run autoreconf -i
    autoreconf -i

    echo run configure
    ./configure

    echo "============================================================"
    echo "= project <$project> created"
    echo "= change to directory <$project> and run <make> to build the application"
    echo "= execute <./$project> in the build directory to run the application"
    echo "============================================================"

else
    if [ "$pages" ]
    then
        if [ -d view ]
        then
            pages $pages
        else
            simplepages $pages
        fi
    fi
fi
